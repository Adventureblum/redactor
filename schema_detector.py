import os
import json
import logging
import asyncio
import re
from typing import Dict
from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage
from langdetect import detect

# Configuration
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

api_key = os.getenv('OPENAI_API_KEY')
if not api_key:
    raise ValueError("OPENAI_API_KEY non trouv√©e dans les variables d'environnement")

class SchemaDetectorAgent:
    """Agent sp√©cialis√© dans la d√©termination du sch√©ma Schema.org optimal"""
    
    def __init__(self, query_id: int):
        self.query_id = query_id
        self.llm = ChatOpenAI(
            model="gpt-4o",
            temperature=0.7,
            api_key=api_key
        )
    
    def detect_language(self, text: str) -> str:
        """D√©tecte la langue du texte (fr ou en)"""
        try:
            lang = detect(text)
            return 'fr' if lang == 'fr' else 'en'
        except:
            french_indicators = ['comment', 'pourquoi', 'qu\'est', 'faire', '√©tape', 'guide']
            text_lower = text.lower()
            french_count = sum(1 for word in french_indicators if word in text_lower)
            return 'fr' if french_count >= 2 else 'en'
    
    def get_schema_detection_prompt(self, query_data: Dict, article_intent: str, selected_angle: str, lang: str) -> str:
        """G√©n√®re le prompt de d√©tection de sch√©ma selon la langue"""
        
        if lang == 'fr':
            return f"""Tu es un expert en Schema.org et optimisation SEO commercial. D√©termine le schema principal le plus appropri√© pour cet article √† vis√©e commerciale.

**REQU√äTE CIBLE :** "{query_data.get('text', 'Sujet non d√©fini')}"
**TYPE D'ARTICLE :** {article_intent}
**ANGLE S√âLECTIONN√â :** {selected_angle}

**SCHEMAS DISPONIBLES (Focus Commercial) :**
- HowTo : Pour guides √©tape par √©tape, tutoriels (id√©al pour conversion)
- FAQPage : Pour pages questions-r√©ponses
- Article : Pour articles g√©n√©riques, actualit√©s
- Product : Pour pr√©sentation de produits/services
- Organization : Pour pr√©senter entreprises, services
- Course : Pour formations, cours en ligne

**INSTRUCTIONS :**
1. Analyse l'intention de la requ√™te
2. Consid√®re le type d'article d√©tect√©
3. Privil√©gie les schemas favorisant la conversion
4. Choisis LE schema le plus pertinent pour un article commercial
5. Justifie bri√®vement ton choix

**FORMAT DE R√âPONSE :**
Schema recommand√©: [NOM_DU_SCHEMA]
Justification: [explication courte orient√©e conversion]
"""
        else:
            return f"""You are a Schema.org and commercial SEO optimization expert. Determine the most appropriate main schema for this commercial-focused article.

**TARGET QUERY:** "{query_data.get('text', 'Undefined topic')}"
**ARTICLE TYPE:** {article_intent}
**SELECTED ANGLE:** {selected_angle}

**AVAILABLE SCHEMAS (Commercial Focus):**
- HowTo: For step-by-step guides, tutorials (ideal for conversion)
- FAQPage: For question-answer pages
- Article: For generic articles, news
- Product: For product/service presentations
- Organization: For presenting companies, services
- Course: For training, online courses

**INSTRUCTIONS:**
1. Analyze the query intent
2. Consider the detected article type
3. Prioritize schemas that favor conversion
4. Choose THE most relevant schema for a commercial article
5. Briefly justify your choice

**RESPONSE FORMAT:**
Recommended schema: [SCHEMA_NAME]
Justification: [brief conversion-oriented explanation]
"""
    
    def get_system_message(self, lang: str) -> str:
        """Retourne le message syst√®me selon la langue"""
        if lang == 'fr':
            return "Tu es un expert en Schema.org sp√©cialis√© dans l'optimisation SEO commerciale."
        else:
            return "You are a Schema.org expert specialized in commercial SEO optimization."
    
    def extract_schema_from_response(self, response: str) -> str:
        """Extrait le nom du schema depuis la r√©ponse du LLM"""
        # Recherche du pattern "Schema recommand√©: [SCHEMA]" ou "Recommended schema: [SCHEMA]"
        schema_match = re.search(r'(?:Schema recommand√©|Recommended schema):\s*([A-Za-z]+)', response)
        if schema_match:
            return schema_match.group(1)
        
        # Fallback: recherche de schemas connus dans le texte
        known_schemas = ['HowTo', 'FAQPage', 'Product', 'Article', 'Organization', 'Course']
        for schema in known_schemas:
            if schema.lower() in response.lower():
                return schema
        
        # Fallback final
        return 'Article'
    
    async def determine_schema(self, query_data: Dict, article_intent: str, selected_angle: str) -> str:
        """D√©termine le sch√©ma Schema.org optimal pour l'article"""
        
        # D√©tection de la langue
        lang = self.detect_language(query_data.get('text', ''))
        logging.info(f"üåê [ID {self.query_id}] Langue d√©tect√©e: {lang.upper()}")
        
        # G√©n√©ration du prompt
        schema_prompt = self.get_schema_detection_prompt(query_data, article_intent, selected_angle, lang)
        system_message = self.get_system_message(lang)
        
        messages = [
            SystemMessage(content=system_message),
            HumanMessage(content=schema_prompt)
        ]
        
        logging.info(f"üè∑Ô∏è [ID {self.query_id}] D√©termination du schema principal commercial...")
        
        # Appel √† OpenAI
        response = await asyncio.get_event_loop().run_in_executor(
            None, self.llm.invoke, messages
        )
        
        # Extraction du schema depuis la r√©ponse
        response_content = response.content.strip()
        schema_type = self.extract_schema_from_response(response_content)
        
        logging.info(f"‚úÖ [ID {self.query_id}] Schema commercial d√©termin√©: {schema_type}")
        logging.info(f"üìù [ID {self.query_id}] Justification: {response_content}")
        
        return schema_type

# Fonction principale pour tester l'agent
async def main():
    """Fonction de test"""
    # Exemple de donn√©es de test
    test_query_data = {
        'id': 1,
        'text': 'comment optimiser son r√©f√©rencement naturel'
    }
    
    article_intent = 'howto'
    selected_angle = 'Guide SEO technique pour d√©veloppeurs avec focus commercial'
    
    # Test de l'agent
    agent = SchemaDetectorAgent(query_id=1)
    schema_type = await agent.determine_schema(test_query_data, article_intent, selected_angle)
    
    print(f"Schema d√©termin√©: {schema_type}")

if __name__ == "__main__":
    asyncio.run(main())